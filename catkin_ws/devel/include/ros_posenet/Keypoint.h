// Generated by gencpp from file ros_posenet/Keypoint.msg
// DO NOT EDIT!


#ifndef ROS_POSENET_MESSAGE_KEYPOINT_H
#define ROS_POSENET_MESSAGE_KEYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace ros_posenet
{
template <class ContainerAllocator>
struct Keypoint_
{
  typedef Keypoint_<ContainerAllocator> Type;

  Keypoint_()
    : part()
    , score(0.0)
    , position()
    , image_position()  {
    }
  Keypoint_(const ContainerAllocator& _alloc)
    : part(_alloc)
    , score(0.0)
    , position(_alloc)
    , image_position(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _part_type;
  _part_type part;

   typedef double _score_type;
  _score_type score;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _image_position_type;
  _image_position_type image_position;





  typedef boost::shared_ptr< ::ros_posenet::Keypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_posenet::Keypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Keypoint_

typedef ::ros_posenet::Keypoint_<std::allocator<void> > Keypoint;

typedef boost::shared_ptr< ::ros_posenet::Keypoint > KeypointPtr;
typedef boost::shared_ptr< ::ros_posenet::Keypoint const> KeypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_posenet::Keypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_posenet::Keypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_posenet::Keypoint_<ContainerAllocator1> & lhs, const ::ros_posenet::Keypoint_<ContainerAllocator2> & rhs)
{
  return lhs.part == rhs.part &&
    lhs.score == rhs.score &&
    lhs.position == rhs.position &&
    lhs.image_position == rhs.image_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_posenet::Keypoint_<ContainerAllocator1> & lhs, const ::ros_posenet::Keypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_posenet

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_posenet::Keypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_posenet::Keypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_posenet::Keypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_posenet::Keypoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_posenet::Keypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_posenet::Keypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_posenet::Keypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed7553fef5f9989af54ac621aed181dd";
  }

  static const char* value(const ::ros_posenet::Keypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed7553fef5f9989aULL;
  static const uint64_t static_value2 = 0xf54ac621aed181ddULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_posenet::Keypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_posenet/Keypoint";
  }

  static const char* value(const ::ros_posenet::Keypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_posenet::Keypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string part\n"
"float64 score\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Point image_position\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ros_posenet::Keypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_posenet::Keypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.part);
      stream.next(m.score);
      stream.next(m.position);
      stream.next(m.image_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Keypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_posenet::Keypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_posenet::Keypoint_<ContainerAllocator>& v)
  {
    s << indent << "part: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.part);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "image_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.image_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_POSENET_MESSAGE_KEYPOINT_H
