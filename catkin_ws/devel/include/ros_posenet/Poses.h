// Generated by gencpp from file ros_posenet/Poses.msg
// DO NOT EDIT!


#ifndef ROS_POSENET_MESSAGE_POSES_H
#define ROS_POSENET_MESSAGE_POSES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_posenet/Pose.h>

namespace ros_posenet
{
template <class ContainerAllocator>
struct Poses_
{
  typedef Poses_<ContainerAllocator> Type;

  Poses_()
    : poses()  {
    }
  Poses_(const ContainerAllocator& _alloc)
    : poses(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ros_posenet::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ros_posenet::Pose_<ContainerAllocator> >> _poses_type;
  _poses_type poses;





  typedef boost::shared_ptr< ::ros_posenet::Poses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_posenet::Poses_<ContainerAllocator> const> ConstPtr;

}; // struct Poses_

typedef ::ros_posenet::Poses_<std::allocator<void> > Poses;

typedef boost::shared_ptr< ::ros_posenet::Poses > PosesPtr;
typedef boost::shared_ptr< ::ros_posenet::Poses const> PosesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_posenet::Poses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_posenet::Poses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_posenet::Poses_<ContainerAllocator1> & lhs, const ::ros_posenet::Poses_<ContainerAllocator2> & rhs)
{
  return lhs.poses == rhs.poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_posenet::Poses_<ContainerAllocator1> & lhs, const ::ros_posenet::Poses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_posenet

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_posenet::Poses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_posenet::Poses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_posenet::Poses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_posenet::Poses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_posenet::Poses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_posenet::Poses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_posenet::Poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e46ae84d5c891cad2f3c5e03526bd70";
  }

  static const char* value(const ::ros_posenet::Poses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e46ae84d5c891caULL;
  static const uint64_t static_value2 = 0xd2f3c5e03526bd70ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_posenet::Poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_posenet/Poses";
  }

  static const char* value(const ::ros_posenet::Poses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_posenet::Poses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Pose[] poses\n"
"================================================================================\n"
"MSG: ros_posenet/Pose\n"
"ros_posenet/Keypoint[] keypoints\n"
"================================================================================\n"
"MSG: ros_posenet/Keypoint\n"
"string part\n"
"float64 score\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Point image_position\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ros_posenet::Poses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_posenet::Poses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Poses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_posenet::Poses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_posenet::Poses_<ContainerAllocator>& v)
  {
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_posenet::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_POSENET_MESSAGE_POSES_H
